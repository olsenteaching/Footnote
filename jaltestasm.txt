; Program that implements modular arithmetic.
; Created by Paul Olsen, 2017.

.declare
:x 73
:y 23
:modulus
:dividend

.begin           ; the goal is to compute :x % :y given above.
                 ; Note that there is no modulus operation, so this is slightly tricky.
jmp :main        ; go to the main part of the program.

:mod             ; takes two numbers, pops the two numbers off the stack and pushes their modulus on the stack.
down 2           ; put the return address underneath the arguments on the stack.
dup
st :dividend     ; we'll need this for later.
down 1           ; we need to store the second item on the stack (the modulus).
dup
st :modulus
down 1           ; swap back so that we can divide...
div              ; at this point the quotient is on top of the stack.
ld :modulus
mul              ; get what quotient * modulus would be.
ld :dividend     ; now get ready to do the math for the remainder.
sub              ; remainder should now be on top of the stack.
down 1           ; we need to put return address on top.
ret              ; return back.




:main            ; the main program starts here.
ldi :y
ldi :x           ; push the values on the stack.
jal :mod         ; do the mod, should result in the modulus of the two numbers on top of the stack.
print            ; print the result.
println          ; format things nicely!
hlt              ; end of program.

